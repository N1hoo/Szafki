# Form implementation generated from reading ui file 'MainWindow.ui'
#
# Created by: PyQt6 UI code generator 6.8.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

# MainWindow.py
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QMainWindow, QDialog, QMessageBox
from PyQt6.QtCore import Qt

# ---- pliki z logiką/bazą/Excel: ----
from database import (
    pobierz_szafki, dodaj_szafke, edytuj_szafke, usun_szafke,
    znajdz_pracownika_w_db
)

# ---- pliki wygenerowane przez pyuic6 ----
from DodawanieSzafek import Ui_DodajSzafki
from DodajPracownika import Ui_Dialog

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1122, 740)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.SzafkiWidget = QtWidgets.QTabWidget(parent=self.centralwidget)
        self.SzafkiWidget.setGeometry(QtCore.QRect(0, 0, 1121, 811))
        self.SzafkiWidget.setObjectName("SzafkiWidget")
        self.SzafkiTab = QtWidgets.QWidget()
        self.SzafkiTab.setObjectName("SzafkiTab")
        self.TabelaSzafek = QtWidgets.QTableWidget(parent=self.SzafkiTab)
        self.TabelaSzafek.setGeometry(QtCore.QRect(10, 90, 1101, 691))
        self.TabelaSzafek.setEditTriggers(QtWidgets.QAbstractItemView.EditTrigger.AllEditTriggers)
        self.TabelaSzafek.setRowCount(0)
        self.TabelaSzafek.setObjectName("TabelaSzafek")
        self.TabelaSzafek.setColumnCount(0)
        self.PrzydzielSz = QtWidgets.QPushButton(parent=self.SzafkiTab)
        self.PrzydzielSz.setGeometry(QtCore.QRect(800, 40, 101, 31))
        self.PrzydzielSz.setObjectName("PrzydzielSz")
        self.EdytujSz = QtWidgets.QPushButton(parent=self.SzafkiTab)
        self.EdytujSz.setGeometry(QtCore.QRect(900, 40, 101, 31))
        self.EdytujSz.setObjectName("EdytujSz")
        self.ZwolnijSz = QtWidgets.QPushButton(parent=self.SzafkiTab)
        self.ZwolnijSz.setGeometry(QtCore.QRect(1000, 40, 101, 31))
        self.ZwolnijSz.setObjectName("ZwolnijSz")
        self.MiejsceCB = QtWidgets.QComboBox(parent=self.SzafkiTab)
        self.MiejsceCB.setEnabled(False)
        self.MiejsceCB.setGeometry(QtCore.QRect(10, 40, 161, 31))
        self.MiejsceCB.setObjectName("MiejsceCB")
        self.DodajSz = QtWidgets.QPushButton(parent=self.SzafkiTab)
        self.DodajSz.setGeometry(QtCore.QRect(700, 40, 101, 31))
        self.DodajSz.setObjectName("DodajSz")
        self.label_6 = QtWidgets.QLabel(parent=self.SzafkiTab)
        self.label_6.setGeometry(QtCore.QRect(10, 20, 40, 16))
        self.label_6.setObjectName("label_6")
        self.groupBox = QtWidgets.QGroupBox(parent=self.SzafkiTab)
        self.groupBox.setGeometry(QtCore.QRect(0, 0, 391, 81))
        self.groupBox.setObjectName("groupBox")
        self.SortWolne = QtWidgets.QCheckBox(parent=self.groupBox)
        self.SortWolne.setGeometry(QtCore.QRect(260, 50, 117, 20))
        self.SortWolne.setObjectName("SortWolne")
        self.NrSz = QtWidgets.QLineEdit(parent=self.groupBox)
        self.NrSz.setGeometry(QtCore.QRect(180, 40, 71, 31))
        self.NrSz.setObjectName("NrSz")
        self.label_8 = QtWidgets.QLabel(parent=self.groupBox)
        self.label_8.setGeometry(QtCore.QRect(180, 20, 45, 16))
        self.label_8.setObjectName("label_8")
        self.groupBox.raise_()
        self.TabelaSzafek.raise_()
        self.PrzydzielSz.raise_()
        self.EdytujSz.raise_()
        self.ZwolnijSz.raise_()
        self.MiejsceCB.raise_()
        self.DodajSz.raise_()
        self.label_6.raise_()
        self.SzafkiWidget.addTab(self.SzafkiTab, "")
        self.PracownicyTab = QtWidgets.QWidget()
        self.PracownicyTab.setObjectName("PracownicyTab")
        self.PrzydzielSzPr = QtWidgets.QPushButton(parent=self.PracownicyTab)
        self.PrzydzielSzPr.setGeometry(QtCore.QRect(850, 40, 121, 31))
        self.PrzydzielSzPr.setObjectName("PrzydzielSzPr")
        self.TabelaPracownikow = QtWidgets.QTableWidget(parent=self.PracownicyTab)
        self.TabelaPracownikow.setGeometry(QtCore.QRect(10, 90, 1101, 691))
        self.TabelaPracownikow.setEditTriggers(QtWidgets.QAbstractItemView.EditTrigger.AllEditTriggers)
        self.TabelaPracownikow.setDragDropOverwriteMode(True)
        self.TabelaPracownikow.setObjectName("TabelaPracownikow")
        self.TabelaPracownikow.setColumnCount(0)
        self.TabelaPracownikow.setRowCount(0)
        self.UsunPr = QtWidgets.QPushButton(parent=self.PracownicyTab)
        self.UsunPr.setGeometry(QtCore.QRect(980, 40, 121, 31))
        self.UsunPr.setObjectName("UsunPr")
        self.NazwiskoPr = QtWidgets.QLineEdit(parent=self.PracownicyTab)
        self.NazwiskoPr.setGeometry(QtCore.QRect(10, 40, 121, 31))
        self.NazwiskoPr.setObjectName("NazwiskoPr")
        self.ImiePr = QtWidgets.QLineEdit(parent=self.PracownicyTab)
        self.ImiePr.setGeometry(QtCore.QRect(140, 40, 121, 31))
        self.ImiePr.setObjectName("ImiePr")
        self.PlecPr = QtWidgets.QLineEdit(parent=self.PracownicyTab)
        self.PlecPr.setGeometry(QtCore.QRect(530, 40, 121, 31))
        self.PlecPr.setObjectName("PlecPr")
        self.label = QtWidgets.QLabel(parent=self.PracownicyTab)
        self.label.setGeometry(QtCore.QRect(10, 20, 50, 16))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(parent=self.PracownicyTab)
        self.label_2.setGeometry(QtCore.QRect(140, 20, 23, 16))
        self.label_2.setObjectName("label_2")
        self.label_5 = QtWidgets.QLabel(parent=self.PracownicyTab)
        self.label_5.setGeometry(QtCore.QRect(530, 20, 22, 16))
        self.label_5.setObjectName("label_5")
        self.groupBox_2 = QtWidgets.QGroupBox(parent=self.PracownicyTab)
        self.groupBox_2.setGeometry(QtCore.QRect(0, 0, 661, 81))
        self.groupBox_2.setObjectName("groupBox_2")
        self.DzialPr = QtWidgets.QLineEdit(parent=self.groupBox_2)
        self.DzialPr.setGeometry(QtCore.QRect(270, 40, 121, 31))
        self.DzialPr.setObjectName("DzialPr")
        self.label_4 = QtWidgets.QLabel(parent=self.groupBox_2)
        self.label_4.setGeometry(QtCore.QRect(270, 20, 25, 16))
        self.label_4.setObjectName("label_4")
        self.label_3 = QtWidgets.QLabel(parent=self.groupBox_2)
        self.label_3.setGeometry(QtCore.QRect(400, 20, 60, 16))
        self.label_3.setObjectName("label_3")
        self.StanowiskoPr = QtWidgets.QLineEdit(parent=self.groupBox_2)
        self.StanowiskoPr.setGeometry(QtCore.QRect(400, 40, 121, 31))
        self.StanowiskoPr.setObjectName("StanowiskoPr")
        self.groupBox_2.raise_()
        self.PrzydzielSzPr.raise_()
        self.TabelaPracownikow.raise_()
        self.UsunPr.raise_()
        self.NazwiskoPr.raise_()
        self.ImiePr.raise_()
        self.PlecPr.raise_()
        self.label.raise_()
        self.label_2.raise_()
        self.label_5.raise_()
        self.SzafkiWidget.addTab(self.PracownicyTab, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.SzafkiWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setTabOrder(self.MiejsceCB, self.NrSz)
        MainWindow.setTabOrder(self.NrSz, self.SortWolne)
        MainWindow.setTabOrder(self.SortWolne, self.DodajSz)
        MainWindow.setTabOrder(self.DodajSz, self.PrzydzielSz)
        MainWindow.setTabOrder(self.PrzydzielSz, self.EdytujSz)
        MainWindow.setTabOrder(self.EdytujSz, self.ZwolnijSz)
        MainWindow.setTabOrder(self.ZwolnijSz, self.SzafkiWidget)
        MainWindow.setTabOrder(self.SzafkiWidget, self.NazwiskoPr)
        MainWindow.setTabOrder(self.NazwiskoPr, self.ImiePr)
        MainWindow.setTabOrder(self.ImiePr, self.StanowiskoPr)
        MainWindow.setTabOrder(self.StanowiskoPr, self.DzialPr)
        MainWindow.setTabOrder(self.DzialPr, self.PlecPr)
        MainWindow.setTabOrder(self.PlecPr, self.PrzydzielSzPr)
        MainWindow.setTabOrder(self.PrzydzielSzPr, self.UsunPr)
        MainWindow.setTabOrder(self.UsunPr, self.TabelaPracownikow)
        MainWindow.setTabOrder(self.TabelaPracownikow, self.TabelaSzafek)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Zarządzanie Szafkami"))
        self.SzafkiWidget.setWhatsThis(_translate("MainWindow", "Zarządzanie szafkami"))
        self.TabelaSzafek.setWhatsThis(_translate("MainWindow", "Tabela szafek"))
        self.TabelaSzafek.setSortingEnabled(True)
        self.PrzydzielSz.setWhatsThis(_translate("MainWindow", "Przydzielanie szafki do pracownika"))
        self.PrzydzielSz.setText(_translate("MainWindow", "Przydziel szafkę"))
        self.EdytujSz.setWhatsThis(_translate("MainWindow", "Edytowanie informacji o szafce (właściciel, uwagi, numer, zamek...)"))
        self.EdytujSz.setText(_translate("MainWindow", "Edytuj szafkę"))
        self.ZwolnijSz.setWhatsThis(_translate("MainWindow", "Zwalnianie szafki przez pracownika"))
        self.ZwolnijSz.setText(_translate("MainWindow", "Zwolnij szafkę"))
        self.MiejsceCB.setWhatsThis(_translate("MainWindow", "Pole wyboru lokalizacji szafek"))
        self.DodajSz.setWhatsThis(_translate("MainWindow", "Dodawanie szafki pustej lub z pracownikiem"))
        self.DodajSz.setText(_translate("MainWindow", "Dodaj szafkę"))
        self.label_6.setText(_translate("MainWindow", "Miejsce"))
        self.groupBox.setTitle(_translate("MainWindow", "Filtry"))
        self.SortWolne.setWhatsThis(_translate("MainWindow", "Filtruje listę tylko do szafek ze statusem \"wolna\""))
        self.SortWolne.setText(_translate("MainWindow", "Tylko wolne szafki"))
        self.NrSz.setWhatsThis(_translate("MainWindow", "Filtrowanie listy po numerze szafki"))
        self.label_8.setText(_translate("MainWindow", "Nr szafki"))
        self.SzafkiWidget.setTabText(self.SzafkiWidget.indexOf(self.SzafkiTab), _translate("MainWindow", "Szafki"))
        self.PrzydzielSzPr.setWhatsThis(_translate("MainWindow", "Przydzielanie szafki do pracownika"))
        self.PrzydzielSzPr.setText(_translate("MainWindow", "Przydziel szafkę"))
        self.TabelaPracownikow.setWhatsThis(_translate("MainWindow", "Tabela szafek"))
        self.UsunPr.setWhatsThis(_translate("MainWindow", "Usuń pracownika z listy (np. w przypadku zakończenia współpracy)"))
        self.UsunPr.setText(_translate("MainWindow", "Usuń pracownika"))
        self.NazwiskoPr.setWhatsThis(_translate("MainWindow", "Filtruje listę wg nazwiska"))
        self.ImiePr.setWhatsThis(_translate("MainWindow", "Filtruje listę wg imienia"))
        self.PlecPr.setWhatsThis(_translate("MainWindow", "Filtruje listę wg płci"))
        self.label.setText(_translate("MainWindow", "Nazwisko"))
        self.label_2.setText(_translate("MainWindow", "Imię"))
        self.label_5.setText(_translate("MainWindow", "Płeć"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Filtry"))
        self.DzialPr.setWhatsThis(_translate("MainWindow", "Filtruje listę wg działu"))
        self.label_4.setText(_translate("MainWindow", "Dział"))
        self.label_3.setText(_translate("MainWindow", "Stanowisko"))
        self.StanowiskoPr.setWhatsThis(_translate("MainWindow", "Filtruje listę wg stanowiska"))
        self.SzafkiWidget.setTabText(self.SzafkiWidget.indexOf(self.PracownicyTab), _translate("MainWindow", "Pracownicy"))

class OknoGlowne(QMainWindow, Ui_MainWindow):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)  # inicjalizacja UI z klasy Ui_MainWindow
        self.inicjuj_signaly()
        self.zaladuj_szafki_do_tabeli()
        self.zaladuj_pracownikow_do_tabeli()

    def inicjuj_signaly(self):
        print("inicjuj_signaly() – podpinam przyciski i filtry.")
        # Zakładka "Szafki"
        self.DodajSz.clicked.connect(self.on_dodaj_szafke)
        self.EdytujSz.clicked.connect(self.on_edytuj_szafke)
        self.ZwolnijSz.clicked.connect(self.on_zwolnij_szafke)
        self.PrzydzielSz.clicked.connect(self.on_przydziel_szafke)
        self.SortWolne.stateChanged.connect(self.filtruj_tabele_szafek)
        self.MiejsceCB.currentIndexChanged.connect(self.filtruj_tabele_szafek)
        self.NrSz.textChanged.connect(self.filtruj_tabele_szafek)

        # Zakładka "Pracownicy"
        self.PrzydzielSzPr.clicked.connect(self.on_przydziel_szafke_pracownikowi)
        self.UsunPr.clicked.connect(self.on_usun_pracownika)
        self.NazwiskoPr.textChanged.connect(self.filtruj_tabele_pracownikow)
        self.ImiePr.textChanged.connect(self.filtruj_tabele_pracownikow)
        self.PlecPr.textChanged.connect(self.filtruj_tabele_pracownikow)
        self.DzialPr.textChanged.connect(self.filtruj_tabele_pracownikow)
        self.StanowiskoPr.textChanged.connect(self.filtruj_tabele_pracownikow)

    # -------------- OBSŁUGA TABELI "SZAFKI" --------------
    def zaladuj_szafki_do_tabeli(self):
        print("zaladuj_szafki_do_tabeli()")
        self._wszystkie_szafki = pobierz_szafki()  # list of rows
        self.filtruj_tabele_szafek()

    # --------------------------------------------------#
    #                OBSŁUGA TABELI "SZAFKI"            #
    # --------------------------------------------------#

    def filtruj_tabele_szafek(self):
        """
        Na podstawie _wszystkie_szafki oraz wybranych filtrów
        pokazujemy w TabelaSzafek tylko te wiersze, które pasują.
        """
        if not hasattr(self, '_wszystkie_szafki'):
            return

        miejsce_filtr = self.MiejsceCB.currentText().strip()
        nr_filtr = self.NrSz.text().strip()
        tylko_wolne = self.SortWolne.isChecked()

        # Przykład prostego filtrowania w pythonie:
        lista_filtrowana = []
        for row in self._wszystkie_szafki:
            (id_sz, miejsce, nr_sz, nr_zamka, plec_szat, kod_prac,
             nazw, imie, dzial, stan, plec, zm, status, komentarz) = row

            # Filtr Miejsce
            if miejsce_filtr and miejsce_filtr != miejsce:
                continue

            # Filtr Nr szafki (jeśli wprowadzony)
            if nr_filtr:
                if not str(nr_sz).startswith(nr_filtr):
                    continue

            # Filtr Tylko wolne
            if tylko_wolne and status != "Wolna":
                continue

            lista_filtrowana.append(row)

        # Teraz aktualizujemy TabelaSzafek
        self._wyswietl_szafki_w_tabeli(lista_filtrowana)

    def _wyswietl_szafki_w_tabeli(self, lista_szafek):
        """
        Ustawia w TabelaSzafek wiersze z listy lista_szafek.
        """
        self.TabelaSzafek.clear()
        self.TabelaSzafek.setColumnCount(15)
        self.TabelaSzafek.setRowCount(len(lista_szafek))

        # Możesz ustawić nagłówki kolumn:
        naglowki = ["ID", "Miejsce", "Nr_szafki", "Nr_zamka",
                    "Płeć_szatni", "Kod_pracownika", "Nazwisko", "Imię",
                    "Dział", "Stanowisko", "Płeć", "Zmiana", "Status", "Komentarz"]
        self.TabelaSzafek.setHorizontalHeaderLabels(naglowki)

        for i, row in enumerate(lista_szafek):
            for j, val in enumerate(row):
                item = QtWidgets.QTableWidgetItem(str(val) if val is not None else "")
                # Możesz ustawić np. niemożność edycji, wyrównanie itp.
                item.setFlags(item.flags() & ~Qt.ItemFlag.ItemIsEditable)
                self.TabelaSzafek.setItem(i, j, item)

        # Ewentualnie auto-dopasowanie kolumn:
        self.TabelaSzafek.resizeColumnsToContents()

    def on_dodaj_szafke(self):
        print("on_dodaj_szafke() – klik.")
        dialog = QDialog(self)
        ui = Ui_DodajSzafki()
        ui.setupUi(dialog)

        ui.StatusSzDS.addItems(["Wolna", "Nieczynna"])
        ui.PlecDS.addItems(["Kobieta", "Mężczyzna", "Neutralna"])

        def klik_dodaj():
            print("klik_dodaj() – tworzymy nową szafkę w db")
            dodaj_szafke(
                miejsce=ui.MiejsceDS.currentText(),
                nr_szafki=int(ui.NrSzDS.text()) if ui.NrSzDS.text() else None,
                nr_zamka=int(ui.KodZDS.text()) if ui.KodZDS.text() else None,
                plec_szatni=ui.PlecDS.currentText(),
                kod_pracownika="",
                nazwisko="",
                imie="",
                dzial="",
                stanowisko="",
                plec="",
                zmiana="",
                status=ui.StatusSzDS.currentText(),
                komentarz=""
            )
            dialog.accept()

        ui.DodajBtDS.clicked.connect(klik_dodaj)

        # Pokaz dialog
        if dialog.exec() == int(QDialog.DialogCode.Accepted):
            self.zaladuj_szafki_do_tabeli()

    def on_edytuj_szafke(self):
        """
        Obsługa przycisku "Edytuj szafkę".
        Edytujemy zaznaczoną szafkę w TabelaSzafek.
        """
        wiersz = self.TabelaSzafek.currentRow()
        if wiersz < 0:
            QMessageBox.warning(self, "Brak zaznaczenia", "Zaznacz szafkę do edycji!")
            return

        # Pobieramy ID z kolumny 0
        id_szafki = int(self.TabelaSzafek.item(wiersz, 0).text())

        # Odczyt aktualnych wartości (dla uproszczenia - odczyt z TabelaSzafek)
        aktualne = [self.TabelaSzafek.item(wiersz, col).text() for col in range(15)]
        # Rozbijmy je:
        (_id, miejsce, nr_s, nr_z, plec_sz, kod_prac, nazw, im, dz, stan, plec, zm, stat, kom) = aktualne

        # Otwieramy dialog "DodawanieSzafek", ale w trybie edycji
        dialog = QDialog(self)
        ui = Ui_DodajSzafki()
        ui.setupUi(dialog)
        
        wynik = dialog.exec()
        if wynik == int(QDialog.DialogCode.Rejected):
            return

        # Ustawiamy wartości
        ui.MiejsceDS.setEditText(miejsce)
        ui.NrSzDS.setText(nr_s)
        ui.KodZDS.setText(nr_z)
        ui.PlecDS.addItems(["Kobieta", "Mężczyzna", "Neutralna"])
        ui.PlecDS.setCurrentText(plec_sz)
        ui.StatusSzDS.addItems(["Wolna", "Nieczynna"])
        if stat in ["Wolna", "Nieczynna"]:
            ui.StatusSzDS.setCurrentText(stat)

        validatorInt = QtGui.QIntValidator(0, 999999, self)
        ui.NrSzDS.setValidator(validatorInt)
        ui.KodZDS.setValidator(validatorInt)

        def klik_zapisz():
            nowe_miejsce = ui.MiejsceDS.currentText().strip()
            nowe_nr_s = ui.NrSzDS.text().strip()
            nowe_nr_z = ui.KodZDS.text().strip()
            nowe_plec_sz = ui.PlecDS.currentText().strip()
            nowe_status = ui.StatusSzDS.currentText().strip()

            # Edytujemy w bazie
            edytuj_szafke(
                id_szafki=id_szafki,
                miejsce=nowe_miejsce,
                nr_szafki=int(nowe_nr_s) if nowe_nr_s else None,
                nr_zamka=int(nowe_nr_z) if nowe_nr_z else None,
                plec_szatni=nowe_plec_sz,
                kod_pracownika=kod_prac,
                nazwisko=nazw,
                imie=im,
                dzial=dz,
                stanowisko=stan,
                plec=plec,
                zmiana=zm,
                status=nowe_status,
                komentarz=kom
            )
            dialog.accept()

        ui.DodajBtDS.setText("Zapisz")  # zmieniamy etykietę przycisku
        ui.DodajBtDS.clicked.connect(klik_zapisz)

        if dialog.exec() == QDialog.Accepted:
            self.zaladuj_szafki_do_tabeli()

    def on_zwolnij_szafke(self):
        """
        Ustawia status zaznaczonej szafki na 'Wolna' i czyści dane pracownika.
        """
        wiersz = self.TabelaSzafek.currentRow()
        if wiersz < 0:
            QMessageBox.warning(self, "Brak zaznaczenia", "Zaznacz szafkę do zwolnienia!")
            return

        id_szafki = int(self.TabelaSzafek.item(wiersz, 0).text())
        # Odczytujemy resztę:
        aktualne = [self.TabelaSzafek.item(wiersz, col).text() for col in range(15)]
        (_id, miejsce, nr_s, nr_z, plec_sz, kod_prac, nazw, im, dz, stan, plec, zm, stat, kom) = aktualne

        # Ustawiamy status="Wolna", czyścimy dane
        edytuj_szafke(
            id_szafki=id_szafki,
            miejsce=miejsce,
            nr_szafki=int(nr_s) if nr_s else None,
            nr_zamka=int(nr_z) if nr_z else None,
            plec_szatni=plec_sz,
            kod_pracownika="",
            nazwisko="",
            imie="",
            dzial="",
            stanowisko="",
            plec="",
            zmiana="",
            status="Wolna",
            komentarz=kom
        )
        self.zaladuj_szafki_do_tabeli()
    def on_przydziel_szafke(self):
        """
        Klik przycisku 'Przydziel szafkę' (zakładka Szafki).
        """
        wiersz = self.TabelaSzafek.currentRow()
        if wiersz < 0:
            QMessageBox.warning(self, "Brak zaznaczenia", "Zaznacz szafkę.")
            return
        # odczyt
        id_szafki = int(self.TabelaSzafek.item(wiersz, 0).text())

        # ... tworzymy dialog QDialog z Ui_Dialog
        dialog = QDialog(self)
        ui = Ui_Dialog()
        ui.setupUi(dialog)

        # Podpinasz on_kod_changed itp.

    # --------------------------------------------------
    #                OBSŁUGA TABELI "PRACOWNICY"
    # --------------------------------------------------
    def zaladuj_pracownikow_do_tabeli(self):
        print("zaladuj_pracownikow_do_tabeli()")
        self._wszyscy_pracownicy = pobierz_szafki()
        self.filtruj_tabele_pracownikow()

    def filtruj_tabele_pracownikow(self):
        """
        Filtr na podstawie (NazwiskoPr, ImiePr, PlecPr, DzialPr, StanowiskoPr).
        W realnej aplikacji pewnie trzeba lepiej zorganizować (bo kod jest w tej samej tabeli).
        """
        if not hasattr(self, '_wszyscy_pracownicy'):
            return
        nazwisko_f = self.NazwiskoPr.text().strip().lower()
        imie_f = self.ImiePr.text().strip().lower()
        plec_f = self.PlecPr.text().strip().lower()
        dzial_f = self.DzialPr.text().strip().lower()
        stan_f = self.StanowiskoPr.text().strip().lower()

        lista = []
        for row in self._wszyscy_pracownicy:
            (id_sz, miejsce, nr_sz, nr_zamka, plec_szat, kod_prac,
             nazw, im, dz, stan, plec, zm, status, kom) = row

            # Jeżeli brak kodu pracownika, to ignorujemy (bo to 'pusta' szafka)
            if not kod_prac:
                continue

            # Filtr:
            if nazwisko_f and nazwisko_f not in nazw.lower():
                continue
            if imie_f and imie_f not in im.lower():
                continue
            if plec_f and plec_f not in plec.lower():
                continue
            if dzial_f and dzial_f not in dz.lower():
                continue
            if stan_f and stan_f not in stan.lower():
                continue

            lista.append(row)

        self._wyswietl_pracownikow_w_tabeli(lista)

    def _wyswietl_pracownikow_w_tabeli(self, lista_prac):
        """
        Ustawia TabelaPracownikow w sposób: 
        [Kod pracownika, Nazwisko, Imię, Płeć, Dział, Stanowisko, Miejsce szafki, Nr szafki, Nr zamka, Status szafki, ...]
        Dla uproszczenia wyświetlamy 1 wiersz = 1 rekord z tab. 'szafki'.
        """
        self.TabelaPracownikow.clear()
        self.TabelaPracownikow.setColumnCount(12)
        self.TabelaPracownikow.setRowCount(len(lista_prac))

        naglowki = ["Kod prac.", "Nazwisko", "Imię", "Płeć", "Dział",
                    "Stanowisko", "Miejsce szafki",
                    "Nr szafki", "Nr zamka", "Status", "ID szafki"]
        self.TabelaPracownikow.setHorizontalHeaderLabels(naglowki)

        for i, row in enumerate(lista_prac):
            (id_sz, miejsce, nr_sz, nr_z, plec_sz, kod_prac,
             nazw, im, dz, stan, plec, zm, status, kom) = row

            wartosci = [
                kod_prac, nazw, im, plec, dz,
                stan, miejsce, nr_sz, nr_z, status, id_sz
            ]
            for j, val in enumerate(wartosci):
                item = QtWidgets.QTableWidgetItem(str(val) if val is not None else "")
                item.setFlags(item.flags() & ~Qt.ItemFlag.ItemIsEditable)
                self.TabelaPracownikow.setItem(i, j, item)

        self.TabelaPracownikow.resizeColumnsToContents()

    def on_przydziel_szafke_pracownikowi(self):
        """
        Kliknięcie w zakładce 'Pracownicy': 'Przydziel szafkę'.
        Otwiera okno 'DodajPracownika'. 
        Jeśli w TabelaPracownikow jest zaznaczony wiersz, wczytuje dane; 
        w przeciwnym razie pola zostają puste.
        """
        # Tworzymy okno QDialog na bazie klasy wygenerowanej z pliku .ui
        print("on_przydziel_szafke_pracownikowi() – klik")
        dialog = QDialog(self)
        ui = Ui_Dialog()
        ui.setupUi(dialog)

        wynik = dialog.exec()
        if wynik == int(QDialog.DialogCode.Rejected):
            return

        # Sprawdzamy, czy któryś wiersz jest zaznaczony
        wiersz = self.TabelaPracownikow.currentRow()
        if wiersz >= 0: 
            # Jeśli tak – odczytujemy dane z kolumn i uzupełniamy pola w dialogu
            kod_prac = self.TabelaPracownikow.item(wiersz, 0).text()
            nazw = self.TabelaPracownikow.item(wiersz, 1).text()
            im = self.TabelaPracownikow.item(wiersz, 2).text()
            plec = self.TabelaPracownikow.item(wiersz, 3).text()
            dzial = self.TabelaPracownikow.item(wiersz, 4).text()
            stanowisko = self.TabelaPracownikow.item(wiersz, 5).text()

            ui.KodPracDP.setText(kod_prac)
            ui.NazwiskoDP.setText(nazw)
            ui.ImieDP.setText(im)
            ui.PlecDP.addItem(["Kobieta", "Mężczyzna"])
            ui.DzialDP.setText(dzial)
            ui.StanowiskoDP.setText(stanowisko)

        else:
            # Jeśli nic nie jest zaznaczone:
            # Nie robimy nic – pola zostają puste (ewentualnie możesz je sam wyczyścić).
            pass

        # Wyświetlamy dialog (blokująco); user klika Anuluj lub Zapisz/Dodaj
        wynik = dialog.exec()

        # Jeśli użytkownik zatwierdził (QDialog.Accepted), odświeżamy listę pracowników
        if wynik == QDialog.Accepted:
            self.zaladuj_pracownikow_do_tabeli()

    def on_usun_pracownika(self):
        """
        Usuwa pracownika z bazy 'szafki' – tzn. czyści Kod_pracownika + dane w WSZYSTKICH jego szafkach.
        """
        wiersz = self.TabelaPracownikow.currentRow()
        if wiersz < 0:
            QMessageBox.warning(self, "Brak zaznaczenia", "Zaznacz pracownika do usunięcia!")
            return

        kod_prac = self.TabelaPracownikow.item(wiersz, 0).text()
        # Najprostsze podejście: pobieramy wszystkie szafki z tym kodem i czyścimy
        for row in self._wszyscy_pracownicy:
            (id_sz, miejsce, nr_sz, nr_z, plec_sz, kodp,
             nazw, im, dz, stan, pl, zm, status, kom) = row
            if kodp == kod_prac:
                # Ustawiamy status na "Wolna"
                edytuj_szafke(
                    id_szafki=id_sz,
                    miejsce=miejsce,
                    nr_szafki=nr_sz,
                    nr_zamka=nr_z,
                    plec_szatni=plec_sz,
                    kod_pracownika="",
                    nazwisko="",
                    imie="",
                    dzial="",
                    stanowisko="",
                    plec="",
                    zmiana="",
                    status="Wolna",
                    komentarz=kom
                )

        self.zaladuj_szafki_do_tabeli()
        self.zaladuj_pracownikow_do_tabeli()